name: build-push
on: workflow_dispatch
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
      id-token: write
    strategy:
      matrix:
        app:
          - name: backend
            dockerfile: ./docker-configs/production/backend.Dockerfile
            path: ./apps/backend
          - name: frontend
            dockerfile: ./docker-configs/production/frontend.Dockerfile
            path: ./apps/frontend
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Extract version from package.json
        id: version
        run: |
          echo "VERSION=$(node -p "require('${{ matrix.app.path }}/package.json').version")" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: image-check
        run: |
          IMAGE_NAME=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.app.name }}:${{ steps.version.outputs.VERSION }}
          if docker manifest inspect $IMAGE_NAME >/dev/null 2>&1; then
            echo "${{ matrix.app.name }} image ${{ steps.version.outputs.VERSION }} already exists"
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "${{ matrix.app.name }} image ${{ steps.version.outputs.VERSION }} does not exist"
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push ${{ matrix.app.name }} image
        if: steps.image-check.outputs.EXISTS == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.app.dockerfile }}
          push: true
          cache-from: type=gha,scope=${{ matrix.app.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.app.name }}
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.app.name }}:latest
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.app.name }}:${{ steps.version.outputs.VERSION }}
