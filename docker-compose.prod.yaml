# docker compose production configuration
---
services:
  frontend:
    image: ghcr.io/scstanton20/tago-analysis-worker/frontend:2.5.2
    container_name: tago-worker-frontend
    networks:
      - traefik-public
      - backend
    #ports:
    #- 80:80
    #- 8443:443
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      backend:
        condition: service_healthy
    labels:
      traefik.enable: 'true'
      traefik.http.routers.tago-worker.rule: 'Host(`tago-worker.scstanton.net`)'
      traefik.http.routers.tago-worker.middlewares: 'secured@file'
      traefik.http.routers.tago-worker.entrypoints: 'https'
      traefik.http.services.tago-worker.loadbalancer.server.url: 'https://tago-worker-frontend'
      traefik.http.routers.tago-worker.tls: 'true'
      traefik.docker.network: 'traefik-public'

  backend:
    image: ghcr.io/scstanton20/tago-analysis-worker/backend:2.4.2
    container_name: tago-worker-backend
    restart: unless-stopped
    volumes:
      - analysis-data:/app/apps/backend/analyses-storage
    networks:
      - backend
    env_file: stack.env
    environment:
      TZ: 'America/New_York'
      SECRET_KEY: ${SECRET_KEY}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "require(''https'').request(''https://localhost:3443/api/status'', { timeout: 2000, rejectUnauthorized: false }, (res) => { const allowed = [200, 203]; process.exit(allowed.includes(res.statusCode) ? 0 : 1); }).on(''error'', () => process.exit(1)).end()"',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

volumes:
  analysis-data:
    driver: local

networks:
  traefik-public:
    external: true
  backend:
    external: true
